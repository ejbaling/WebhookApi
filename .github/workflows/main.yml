name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/webhookapi:latest
      DOCKER_DIR: WebhookApi
      REMOTE_HOST: ${{ secrets.TAILSCALE_HOST }} # e.g. username@hostname.tailnet-name.ts.net
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Inject appsettings.Production.json from secret
        run: |
          cat <<EOF > $DOCKER_DIR/appsettings.Production.json
          ${{ secrets.APPSETTINGS_PROD_JSON }}
          EOF

      - name: Validate JSON format
        run: |
          jq . $DOCKER_DIR/appsettings.Production.json > /dev/null
      
      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE -f $DOCKER_DIR/Dockerfile $DOCKER_DIR
          docker push $DOCKER_IMAGE

      - name: Start Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
          tags: tag:ci
          #oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          #oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}

      - name: Wait for Tailscale to connect
        run: |
          echo "Tailscale status:"
          tailscale status

      ## Allow passwordless sudo for the GitHub Action user (recommended for CI/CD)
      # sudo visudo
      # your-username ALL=(ALL) NOPASSWD:ALL

      - name: Debug image name
        run: |
          echo "Image to deploy: $DOCKER_IMAGE"

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no $REMOTE_HOST << EOF
            set -ex
            sudo docker pull $DOCKER_IMAGE
            cd ~/WebhookApi/WebhookApi
            sudo docker compose down
            sudo docker compose up -d
            sudo docker system prune -f -f
          EOF
